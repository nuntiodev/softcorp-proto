// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_softcorp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectPublicServiceClient is the client API for ConnectPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectPublicServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ValidateLoginChallenge(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	ValidateUserCredentials(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	ValidateConsentChallenge(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	GiveConsent(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	Logout(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	CreateUser(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	SendResetEmail(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
	ResetPassword(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error)
}

type connectPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectPublicServiceClient(cc grpc.ClientConnInterface) ConnectPublicServiceClient {
	return &connectPublicServiceClient{cc}
}

func (c *connectPublicServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) ValidateLoginChallenge(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/ValidateLoginChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) ValidateUserCredentials(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/ValidateUserCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) ValidateConsentChallenge(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/ValidateConsentChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) GiveConsent(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/GiveConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) Logout(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) CreateUser(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) SendResetEmail(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/SendResetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectPublicServiceClient) ResetPassword(ctx context.Context, in *AuthPublicRequest, opts ...grpc.CallOption) (*AuthPublicResponse, error) {
	out := new(AuthPublicResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectPublicService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectPublicServiceServer is the server API for ConnectPublicService service.
// All implementations should embed UnimplementedConnectPublicServiceServer
// for forward compatibility
type ConnectPublicServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	ValidateLoginChallenge(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	ValidateUserCredentials(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	ValidateConsentChallenge(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	GiveConsent(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	Logout(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	CreateUser(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	SendResetEmail(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
	ResetPassword(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error)
}

// UnimplementedConnectPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectPublicServiceServer struct {
}

func (UnimplementedConnectPublicServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedConnectPublicServiceServer) ValidateLoginChallenge(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLoginChallenge not implemented")
}
func (UnimplementedConnectPublicServiceServer) ValidateUserCredentials(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserCredentials not implemented")
}
func (UnimplementedConnectPublicServiceServer) ValidateConsentChallenge(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConsentChallenge not implemented")
}
func (UnimplementedConnectPublicServiceServer) GiveConsent(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveConsent not implemented")
}
func (UnimplementedConnectPublicServiceServer) Logout(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedConnectPublicServiceServer) CreateUser(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedConnectPublicServiceServer) SendResetEmail(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetEmail not implemented")
}
func (UnimplementedConnectPublicServiceServer) ResetPassword(context.Context, *AuthPublicRequest) (*AuthPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}

// UnsafeConnectPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectPublicServiceServer will
// result in compilation errors.
type UnsafeConnectPublicServiceServer interface {
	mustEmbedUnimplementedConnectPublicServiceServer()
}

func RegisterConnectPublicServiceServer(s grpc.ServiceRegistrar, srv ConnectPublicServiceServer) {
	s.RegisterService(&ConnectPublicService_ServiceDesc, srv)
}

func _ConnectPublicService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_ValidateLoginChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).ValidateLoginChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/ValidateLoginChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).ValidateLoginChallenge(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_ValidateUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).ValidateUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/ValidateUserCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).ValidateUserCredentials(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_ValidateConsentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).ValidateConsentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/ValidateConsentChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).ValidateConsentChallenge(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_GiveConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).GiveConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/GiveConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).GiveConsent(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).Logout(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).CreateUser(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_SendResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).SendResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/SendResetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).SendResetEmail(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectPublicService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectPublicServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectPublicService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectPublicServiceServer).ResetPassword(ctx, req.(*AuthPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectPublicService_ServiceDesc is the grpc.ServiceDesc for ConnectPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.ConnectPublicService",
	HandlerType: (*ConnectPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ConnectPublicService_Ping_Handler,
		},
		{
			MethodName: "ValidateLoginChallenge",
			Handler:    _ConnectPublicService_ValidateLoginChallenge_Handler,
		},
		{
			MethodName: "ValidateUserCredentials",
			Handler:    _ConnectPublicService_ValidateUserCredentials_Handler,
		},
		{
			MethodName: "ValidateConsentChallenge",
			Handler:    _ConnectPublicService_ValidateConsentChallenge_Handler,
		},
		{
			MethodName: "GiveConsent",
			Handler:    _ConnectPublicService_GiveConsent_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ConnectPublicService_Logout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ConnectPublicService_CreateUser_Handler,
		},
		{
			MethodName: "SendResetEmail",
			Handler:    _ConnectPublicService_SendResetEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ConnectPublicService_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// ConnectAdminServiceClient is the client API for ConnectAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectAdminServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	ResetAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
}

type connectAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectAdminServiceClient(cc grpc.ClientConnInterface) ConnectAdminServiceClient {
	return &connectAdminServiceClient{cc}
}

func (c *connectAdminServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/GetAppById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/UpdateAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/UpdateAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) ResetAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/ResetAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/UpdateAppSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/GetAppMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectAdminServiceClient) DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.ConnectAdminService/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectAdminServiceServer is the server API for ConnectAdminService service.
// All implementations should embed UnimplementedConnectAdminServiceServer
// for forward compatibility
type ConnectAdminServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	ResetAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
}

// UnimplementedConnectAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectAdminServiceServer struct {
}

func (UnimplementedConnectAdminServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedConnectAdminServiceServer) CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedConnectAdminServiceServer) GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppById not implemented")
}
func (UnimplementedConnectAdminServiceServer) UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppDetails not implemented")
}
func (UnimplementedConnectAdminServiceServer) UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppOAuth not implemented")
}
func (UnimplementedConnectAdminServiceServer) ResetAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAppOAuth not implemented")
}
func (UnimplementedConnectAdminServiceServer) UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppSecurity not implemented")
}
func (UnimplementedConnectAdminServiceServer) GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMetrics not implemented")
}
func (UnimplementedConnectAdminServiceServer) DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}

// UnsafeConnectAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectAdminServiceServer will
// result in compilation errors.
type UnsafeConnectAdminServiceServer interface {
	mustEmbedUnimplementedConnectAdminServiceServer()
}

func RegisterConnectAdminServiceServer(s grpc.ServiceRegistrar, srv ConnectAdminServiceServer) {
	s.RegisterService(&ConnectAdminService_ServiceDesc, srv)
}

func _ConnectAdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).CreateApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_GetAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).GetAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/GetAppById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).GetAppById(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_UpdateAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).UpdateAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/UpdateAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).UpdateAppDetails(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_UpdateAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).UpdateAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/UpdateAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).UpdateAppOAuth(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_ResetAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).ResetAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/ResetAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).ResetAppOAuth(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_UpdateAppSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).UpdateAppSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/UpdateAppSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).UpdateAppSecurity(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_GetAppMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).GetAppMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/GetAppMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).GetAppMetrics(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectAdminService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectAdminServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.ConnectAdminService/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectAdminServiceServer).DeleteApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectAdminService_ServiceDesc is the grpc.ServiceDesc for ConnectAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.ConnectAdminService",
	HandlerType: (*ConnectAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ConnectAdminService_Ping_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _ConnectAdminService_CreateApp_Handler,
		},
		{
			MethodName: "GetAppById",
			Handler:    _ConnectAdminService_GetAppById_Handler,
		},
		{
			MethodName: "UpdateAppDetails",
			Handler:    _ConnectAdminService_UpdateAppDetails_Handler,
		},
		{
			MethodName: "UpdateAppOAuth",
			Handler:    _ConnectAdminService_UpdateAppOAuth_Handler,
		},
		{
			MethodName: "ResetAppOAuth",
			Handler:    _ConnectAdminService_ResetAppOAuth_Handler,
		},
		{
			MethodName: "UpdateAppSecurity",
			Handler:    _ConnectAdminService_UpdateAppSecurity_Handler,
		},
		{
			MethodName: "GetAppMetrics",
			Handler:    _ConnectAdminService_GetAppMetrics_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _ConnectAdminService_DeleteApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// UserPublicServiceClient is the client API for UserPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPublicServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUserByToken(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error)
	UpdateUserPassword(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error)
	UpdateUserEmail(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error)
	UpdateUserGender(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error)
	DeleteUser(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error)
}

type userPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPublicServiceClient(cc grpc.ClientConnInterface) UserPublicServiceClient {
	return &userPublicServiceClient{cc}
}

func (c *userPublicServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) GetUserByToken(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error) {
	out := new(PublicUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/GetUserByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) UpdateUserPassword(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error) {
	out := new(PublicUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) UpdateUserEmail(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error) {
	out := new(PublicUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/UpdateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) UpdateUserGender(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error) {
	out := new(PublicUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/UpdateUserGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) DeleteUser(ctx context.Context, in *PublicUserRequest, opts ...grpc.CallOption) (*PublicUserResponse, error) {
	out := new(PublicUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserPublicService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPublicServiceServer is the server API for UserPublicService service.
// All implementations should embed UnimplementedUserPublicServiceServer
// for forward compatibility
type UserPublicServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	GetUserByToken(context.Context, *PublicUserRequest) (*PublicUserResponse, error)
	UpdateUserPassword(context.Context, *PublicUserRequest) (*PublicUserResponse, error)
	UpdateUserEmail(context.Context, *PublicUserRequest) (*PublicUserResponse, error)
	UpdateUserGender(context.Context, *PublicUserRequest) (*PublicUserResponse, error)
	DeleteUser(context.Context, *PublicUserRequest) (*PublicUserResponse, error)
}

// UnimplementedUserPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserPublicServiceServer struct {
}

func (UnimplementedUserPublicServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserPublicServiceServer) GetUserByToken(context.Context, *PublicUserRequest) (*PublicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedUserPublicServiceServer) UpdateUserPassword(context.Context, *PublicUserRequest) (*PublicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedUserPublicServiceServer) UpdateUserEmail(context.Context, *PublicUserRequest) (*PublicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedUserPublicServiceServer) UpdateUserGender(context.Context, *PublicUserRequest) (*PublicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGender not implemented")
}
func (UnimplementedUserPublicServiceServer) DeleteUser(context.Context, *PublicUserRequest) (*PublicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

// UnsafeUserPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPublicServiceServer will
// result in compilation errors.
type UnsafeUserPublicServiceServer interface {
	mustEmbedUnimplementedUserPublicServiceServer()
}

func RegisterUserPublicServiceServer(s grpc.ServiceRegistrar, srv UserPublicServiceServer) {
	s.RegisterService(&UserPublicService_ServiceDesc, srv)
}

func _UserPublicService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/GetUserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).GetUserByToken(ctx, req.(*PublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).UpdateUserPassword(ctx, req.(*PublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).UpdateUserEmail(ctx, req.(*PublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_UpdateUserGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).UpdateUserGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/UpdateUserGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).UpdateUserGender(ctx, req.(*PublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserPublicService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).DeleteUser(ctx, req.(*PublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPublicService_ServiceDesc is the grpc.ServiceDesc for UserPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.UserPublicService",
	HandlerType: (*UserPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UserPublicService_Ping_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _UserPublicService_GetUserByToken_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _UserPublicService_UpdateUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _UserPublicService_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserGender",
			Handler:    _UserPublicService_UpdateUserGender_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserPublicService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// UserAdminServiceClient is the client API for UserAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAdminServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	GetUserById(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	GetUserByEmail(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	GetBulkUsersById(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	GetBulkUsersByEmail(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
}

type userAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAdminServiceClient(cc grpc.ClientConnInterface) UserAdminServiceClient {
	return &userAdminServiceClient{cc}
}

func (c *userAdminServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminServiceClient) CreateUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminServiceClient) GetUserById(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminServiceClient) GetUserByEmail(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminServiceClient) GetBulkUsersById(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/GetBulkUsersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminServiceClient) GetBulkUsersByEmail(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.UserAdminService/GetBulkUsersByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAdminServiceServer is the server API for UserAdminService service.
// All implementations should embed UnimplementedUserAdminServiceServer
// for forward compatibility
type UserAdminServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	CreateUser(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	GetUserById(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	GetUserByEmail(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	GetBulkUsersById(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	GetBulkUsersByEmail(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
}

// UnimplementedUserAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserAdminServiceServer struct {
}

func (UnimplementedUserAdminServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserAdminServiceServer) CreateUser(context.Context, *AdminUserRequest) (*AdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserAdminServiceServer) GetUserById(context.Context, *AdminUserRequest) (*AdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserAdminServiceServer) GetUserByEmail(context.Context, *AdminUserRequest) (*AdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedUserAdminServiceServer) GetBulkUsersById(context.Context, *AdminUserRequest) (*AdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkUsersById not implemented")
}
func (UnimplementedUserAdminServiceServer) GetBulkUsersByEmail(context.Context, *AdminUserRequest) (*AdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkUsersByEmail not implemented")
}

// UnsafeUserAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAdminServiceServer will
// result in compilation errors.
type UnsafeUserAdminServiceServer interface {
	mustEmbedUnimplementedUserAdminServiceServer()
}

func RegisterUserAdminServiceServer(s grpc.ServiceRegistrar, srv UserAdminServiceServer) {
	s.RegisterService(&UserAdminService_ServiceDesc, srv)
}

func _UserAdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdminService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).CreateUser(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdminService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).GetUserById(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdminService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).GetUserByEmail(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdminService_GetBulkUsersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).GetBulkUsersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/GetBulkUsersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).GetBulkUsersById(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdminService_GetBulkUsersByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServiceServer).GetBulkUsersByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.UserAdminService/GetBulkUsersByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServiceServer).GetBulkUsersByEmail(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAdminService_ServiceDesc is the grpc.ServiceDesc for UserAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.UserAdminService",
	HandlerType: (*UserAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UserAdminService_Ping_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserAdminService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserAdminService_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UserAdminService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetBulkUsersById",
			Handler:    _UserAdminService_GetBulkUsersById_Handler,
		},
		{
			MethodName: "GetBulkUsersByEmail",
			Handler:    _UserAdminService_GetBulkUsersByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// CollaborationPublicServiceClient is the client API for CollaborationPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationPublicServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type collaborationPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationPublicServiceClient(cc grpc.ClientConnInterface) CollaborationPublicServiceClient {
	return &collaborationPublicServiceClient{cc}
}

func (c *collaborationPublicServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationPublicService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationPublicServiceServer is the server API for CollaborationPublicService service.
// All implementations should embed UnimplementedCollaborationPublicServiceServer
// for forward compatibility
type CollaborationPublicServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
}

// UnimplementedCollaborationPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollaborationPublicServiceServer struct {
}

func (UnimplementedCollaborationPublicServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeCollaborationPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationPublicServiceServer will
// result in compilation errors.
type UnsafeCollaborationPublicServiceServer interface {
	mustEmbedUnimplementedCollaborationPublicServiceServer()
}

func RegisterCollaborationPublicServiceServer(s grpc.ServiceRegistrar, srv CollaborationPublicServiceServer) {
	s.RegisterService(&CollaborationPublicService_ServiceDesc, srv)
}

func _CollaborationPublicService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationPublicServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationPublicService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationPublicServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationPublicService_ServiceDesc is the grpc.ServiceDesc for CollaborationPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.CollaborationPublicService",
	HandlerType: (*CollaborationPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CollaborationPublicService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// CollaborationAdminServiceClient is the client API for CollaborationAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationAdminServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	InitCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	CreateCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	GetCollaborationById(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	GetCollaborationsByObjectId(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	GetUserCollaborations(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	GetUserObjectCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	AcceptCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	DeleteUserObjectCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	DeleteCollaborationsByObjectId(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
	DeleteUserCollaborations(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error)
}

type collaborationAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationAdminServiceClient(cc grpc.ClientConnInterface) CollaborationAdminServiceClient {
	return &collaborationAdminServiceClient{cc}
}

func (c *collaborationAdminServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) InitCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/InitCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) CreateCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/CreateCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) GetCollaborationById(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/GetCollaborationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) GetCollaborationsByObjectId(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/GetCollaborationsByObjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) GetUserCollaborations(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/GetUserCollaborations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) GetUserObjectCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/GetUserObjectCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) AcceptCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/AcceptCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) DeleteUserObjectCollaboration(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/DeleteUserObjectCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) DeleteCollaborationsByObjectId(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/DeleteCollaborationsByObjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationAdminServiceClient) DeleteUserCollaborations(ctx context.Context, in *AdminCollaborationRequest, opts ...grpc.CallOption) (*AdminCollaborationResponse, error) {
	out := new(AdminCollaborationResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.CollaborationAdminService/DeleteUserCollaborations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationAdminServiceServer is the server API for CollaborationAdminService service.
// All implementations should embed UnimplementedCollaborationAdminServiceServer
// for forward compatibility
type CollaborationAdminServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	InitCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	CreateCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	GetCollaborationById(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	GetCollaborationsByObjectId(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	GetUserCollaborations(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	GetUserObjectCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	AcceptCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	DeleteUserObjectCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	DeleteCollaborationsByObjectId(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
	DeleteUserCollaborations(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error)
}

// UnimplementedCollaborationAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollaborationAdminServiceServer struct {
}

func (UnimplementedCollaborationAdminServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) InitCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitCollaboration not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) CreateCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollaboration not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) GetCollaborationById(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborationById not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) GetCollaborationsByObjectId(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborationsByObjectId not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) GetUserCollaborations(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollaborations not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) GetUserObjectCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserObjectCollaboration not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) AcceptCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCollaboration not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) DeleteUserObjectCollaboration(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserObjectCollaboration not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) DeleteCollaborationsByObjectId(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollaborationsByObjectId not implemented")
}
func (UnimplementedCollaborationAdminServiceServer) DeleteUserCollaborations(context.Context, *AdminCollaborationRequest) (*AdminCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCollaborations not implemented")
}

// UnsafeCollaborationAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationAdminServiceServer will
// result in compilation errors.
type UnsafeCollaborationAdminServiceServer interface {
	mustEmbedUnimplementedCollaborationAdminServiceServer()
}

func RegisterCollaborationAdminServiceServer(s grpc.ServiceRegistrar, srv CollaborationAdminServiceServer) {
	s.RegisterService(&CollaborationAdminService_ServiceDesc, srv)
}

func _CollaborationAdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_InitCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).InitCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/InitCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).InitCollaboration(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_CreateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).CreateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/CreateCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).CreateCollaboration(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_GetCollaborationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).GetCollaborationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/GetCollaborationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).GetCollaborationById(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_GetCollaborationsByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).GetCollaborationsByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/GetCollaborationsByObjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).GetCollaborationsByObjectId(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_GetUserCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).GetUserCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/GetUserCollaborations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).GetUserCollaborations(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_GetUserObjectCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).GetUserObjectCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/GetUserObjectCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).GetUserObjectCollaboration(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_AcceptCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).AcceptCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/AcceptCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).AcceptCollaboration(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_DeleteUserObjectCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).DeleteUserObjectCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/DeleteUserObjectCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).DeleteUserObjectCollaboration(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_DeleteCollaborationsByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).DeleteCollaborationsByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/DeleteCollaborationsByObjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).DeleteCollaborationsByObjectId(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationAdminService_DeleteUserCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationAdminServiceServer).DeleteUserCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.CollaborationAdminService/DeleteUserCollaborations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationAdminServiceServer).DeleteUserCollaborations(ctx, req.(*AdminCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationAdminService_ServiceDesc is the grpc.ServiceDesc for CollaborationAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.CollaborationAdminService",
	HandlerType: (*CollaborationAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CollaborationAdminService_Ping_Handler,
		},
		{
			MethodName: "InitCollaboration",
			Handler:    _CollaborationAdminService_InitCollaboration_Handler,
		},
		{
			MethodName: "CreateCollaboration",
			Handler:    _CollaborationAdminService_CreateCollaboration_Handler,
		},
		{
			MethodName: "GetCollaborationById",
			Handler:    _CollaborationAdminService_GetCollaborationById_Handler,
		},
		{
			MethodName: "GetCollaborationsByObjectId",
			Handler:    _CollaborationAdminService_GetCollaborationsByObjectId_Handler,
		},
		{
			MethodName: "GetUserCollaborations",
			Handler:    _CollaborationAdminService_GetUserCollaborations_Handler,
		},
		{
			MethodName: "GetUserObjectCollaboration",
			Handler:    _CollaborationAdminService_GetUserObjectCollaboration_Handler,
		},
		{
			MethodName: "AcceptCollaboration",
			Handler:    _CollaborationAdminService_AcceptCollaboration_Handler,
		},
		{
			MethodName: "DeleteUserObjectCollaboration",
			Handler:    _CollaborationAdminService_DeleteUserObjectCollaboration_Handler,
		},
		{
			MethodName: "DeleteCollaborationsByObjectId",
			Handler:    _CollaborationAdminService_DeleteCollaborationsByObjectId_Handler,
		},
		{
			MethodName: "DeleteUserCollaborations",
			Handler:    _CollaborationAdminService_DeleteUserCollaborations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}

// DashboardPublicServiceClient is the client API for DashboardPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardPublicServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateOrganization(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	GetOrganizations(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	UpdateOrganizationDetails(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	DeleteOrganization(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	CreateConnectApp(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	GetConnectAppsByOrgId(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	GetConnectAppById(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	UpdateConnectAppDetails(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	UpdateConnectAppOAuth(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	ResetConnectAppOAuth(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	UpdateConnectAppSecurity(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	GetAppMetrics(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	DeleteConnectApp(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	InviteCollaborator(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	GetCollaborations(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	AcceptCollaboration(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
	DeleteCollaboration(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error)
}

type dashboardPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardPublicServiceClient(cc grpc.ClientConnInterface) DashboardPublicServiceClient {
	return &dashboardPublicServiceClient{cc}
}

func (c *dashboardPublicServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) CreateOrganization(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) GetOrganizations(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) UpdateOrganizationDetails(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/UpdateOrganizationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) DeleteOrganization(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) CreateConnectApp(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/CreateConnectApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) GetConnectAppsByOrgId(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/GetConnectAppsByOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) GetConnectAppById(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/GetConnectAppById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) UpdateConnectAppDetails(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/UpdateConnectAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) UpdateConnectAppOAuth(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/UpdateConnectAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) ResetConnectAppOAuth(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/ResetConnectAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) UpdateConnectAppSecurity(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/UpdateConnectAppSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) GetAppMetrics(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/GetAppMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) DeleteConnectApp(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/DeleteConnectApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) InviteCollaborator(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/InviteCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) GetCollaborations(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/GetCollaborations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) AcceptCollaboration(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/AcceptCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardPublicServiceClient) DeleteCollaboration(ctx context.Context, in *PublicDashboardRequest, opts ...grpc.CallOption) (*PublicDashboardResponse, error) {
	out := new(PublicDashboardResponse)
	err := c.cc.Invoke(ctx, "/Softcorp.DashboardPublicService/DeleteCollaboration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardPublicServiceServer is the server API for DashboardPublicService service.
// All implementations should embed UnimplementedDashboardPublicServiceServer
// for forward compatibility
type DashboardPublicServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	CreateOrganization(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	GetOrganizations(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	UpdateOrganizationDetails(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	DeleteOrganization(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	CreateConnectApp(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	GetConnectAppsByOrgId(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	GetConnectAppById(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	UpdateConnectAppDetails(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	UpdateConnectAppOAuth(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	ResetConnectAppOAuth(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	UpdateConnectAppSecurity(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	GetAppMetrics(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	DeleteConnectApp(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	InviteCollaborator(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	GetCollaborations(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	AcceptCollaboration(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
	DeleteCollaboration(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error)
}

// UnimplementedDashboardPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardPublicServiceServer struct {
}

func (UnimplementedDashboardPublicServiceServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDashboardPublicServiceServer) CreateOrganization(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedDashboardPublicServiceServer) GetOrganizations(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (UnimplementedDashboardPublicServiceServer) UpdateOrganizationDetails(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationDetails not implemented")
}
func (UnimplementedDashboardPublicServiceServer) DeleteOrganization(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedDashboardPublicServiceServer) CreateConnectApp(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectApp not implemented")
}
func (UnimplementedDashboardPublicServiceServer) GetConnectAppsByOrgId(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectAppsByOrgId not implemented")
}
func (UnimplementedDashboardPublicServiceServer) GetConnectAppById(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectAppById not implemented")
}
func (UnimplementedDashboardPublicServiceServer) UpdateConnectAppDetails(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectAppDetails not implemented")
}
func (UnimplementedDashboardPublicServiceServer) UpdateConnectAppOAuth(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectAppOAuth not implemented")
}
func (UnimplementedDashboardPublicServiceServer) ResetConnectAppOAuth(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetConnectAppOAuth not implemented")
}
func (UnimplementedDashboardPublicServiceServer) UpdateConnectAppSecurity(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectAppSecurity not implemented")
}
func (UnimplementedDashboardPublicServiceServer) GetAppMetrics(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMetrics not implemented")
}
func (UnimplementedDashboardPublicServiceServer) DeleteConnectApp(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectApp not implemented")
}
func (UnimplementedDashboardPublicServiceServer) InviteCollaborator(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteCollaborator not implemented")
}
func (UnimplementedDashboardPublicServiceServer) GetCollaborations(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborations not implemented")
}
func (UnimplementedDashboardPublicServiceServer) AcceptCollaboration(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCollaboration not implemented")
}
func (UnimplementedDashboardPublicServiceServer) DeleteCollaboration(context.Context, *PublicDashboardRequest) (*PublicDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollaboration not implemented")
}

// UnsafeDashboardPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardPublicServiceServer will
// result in compilation errors.
type UnsafeDashboardPublicServiceServer interface {
	mustEmbedUnimplementedDashboardPublicServiceServer()
}

func RegisterDashboardPublicServiceServer(s grpc.ServiceRegistrar, srv DashboardPublicServiceServer) {
	s.RegisterService(&DashboardPublicService_ServiceDesc, srv)
}

func _DashboardPublicService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).CreateOrganization(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).GetOrganizations(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_UpdateOrganizationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).UpdateOrganizationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/UpdateOrganizationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).UpdateOrganizationDetails(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).DeleteOrganization(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_CreateConnectApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).CreateConnectApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/CreateConnectApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).CreateConnectApp(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_GetConnectAppsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).GetConnectAppsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/GetConnectAppsByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).GetConnectAppsByOrgId(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_GetConnectAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).GetConnectAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/GetConnectAppById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).GetConnectAppById(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_UpdateConnectAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/UpdateConnectAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppDetails(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_UpdateConnectAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/UpdateConnectAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppOAuth(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_ResetConnectAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).ResetConnectAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/ResetConnectAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).ResetConnectAppOAuth(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_UpdateConnectAppSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/UpdateConnectAppSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).UpdateConnectAppSecurity(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_GetAppMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).GetAppMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/GetAppMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).GetAppMetrics(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_DeleteConnectApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).DeleteConnectApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/DeleteConnectApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).DeleteConnectApp(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_InviteCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).InviteCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/InviteCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).InviteCollaborator(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_GetCollaborations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).GetCollaborations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/GetCollaborations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).GetCollaborations(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_AcceptCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).AcceptCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/AcceptCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).AcceptCollaboration(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardPublicService_DeleteCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardPublicServiceServer).DeleteCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Softcorp.DashboardPublicService/DeleteCollaboration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardPublicServiceServer).DeleteCollaboration(ctx, req.(*PublicDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardPublicService_ServiceDesc is the grpc.ServiceDesc for DashboardPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Softcorp.DashboardPublicService",
	HandlerType: (*DashboardPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DashboardPublicService_Ping_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _DashboardPublicService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _DashboardPublicService_GetOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganizationDetails",
			Handler:    _DashboardPublicService_UpdateOrganizationDetails_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _DashboardPublicService_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateConnectApp",
			Handler:    _DashboardPublicService_CreateConnectApp_Handler,
		},
		{
			MethodName: "GetConnectAppsByOrgId",
			Handler:    _DashboardPublicService_GetConnectAppsByOrgId_Handler,
		},
		{
			MethodName: "GetConnectAppById",
			Handler:    _DashboardPublicService_GetConnectAppById_Handler,
		},
		{
			MethodName: "UpdateConnectAppDetails",
			Handler:    _DashboardPublicService_UpdateConnectAppDetails_Handler,
		},
		{
			MethodName: "UpdateConnectAppOAuth",
			Handler:    _DashboardPublicService_UpdateConnectAppOAuth_Handler,
		},
		{
			MethodName: "ResetConnectAppOAuth",
			Handler:    _DashboardPublicService_ResetConnectAppOAuth_Handler,
		},
		{
			MethodName: "UpdateConnectAppSecurity",
			Handler:    _DashboardPublicService_UpdateConnectAppSecurity_Handler,
		},
		{
			MethodName: "GetAppMetrics",
			Handler:    _DashboardPublicService_GetAppMetrics_Handler,
		},
		{
			MethodName: "DeleteConnectApp",
			Handler:    _DashboardPublicService_DeleteConnectApp_Handler,
		},
		{
			MethodName: "InviteCollaborator",
			Handler:    _DashboardPublicService_InviteCollaborator_Handler,
		},
		{
			MethodName: "GetCollaborations",
			Handler:    _DashboardPublicService_GetCollaborations_Handler,
		},
		{
			MethodName: "AcceptCollaboration",
			Handler:    _DashboardPublicService_AcceptCollaboration_Handler,
		},
		{
			MethodName: "DeleteCollaboration",
			Handler:    _DashboardPublicService_DeleteCollaboration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "softcorp.proto",
}
