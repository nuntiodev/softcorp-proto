// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: softcorp.proto

package go_softcorp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Timespan int32

const (
	Timespan_INVALID_TIMESPAN Timespan = 0
	Timespan_TIMESPAN_DAY     Timespan = 1
	Timespan_TIMESPAN_WEEK    Timespan = 2
	Timespan_TIMESPAN_MONTH   Timespan = 3
	Timespan_TIMESPAN_YEAR    Timespan = 4
	Timespan_TIMESPAN_ALL     Timespan = 5
)

// Enum value maps for Timespan.
var (
	Timespan_name = map[int32]string{
		0: "INVALID_TIMESPAN",
		1: "TIMESPAN_DAY",
		2: "TIMESPAN_WEEK",
		3: "TIMESPAN_MONTH",
		4: "TIMESPAN_YEAR",
		5: "TIMESPAN_ALL",
	}
	Timespan_value = map[string]int32{
		"INVALID_TIMESPAN": 0,
		"TIMESPAN_DAY":     1,
		"TIMESPAN_WEEK":    2,
		"TIMESPAN_MONTH":   3,
		"TIMESPAN_YEAR":    4,
		"TIMESPAN_ALL":     5,
	}
)

func (x Timespan) Enum() *Timespan {
	p := new(Timespan)
	*p = x
	return p
}

func (x Timespan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timespan) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[0].Descriptor()
}

func (Timespan) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[0]
}

func (x Timespan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timespan.Descriptor instead.
func (Timespan) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{0}
}

type Gender int32

const (
	Gender_INVALID_GENDER Gender = 0
	Gender_MALE           Gender = 1
	Gender_FEMALE         Gender = 2
	Gender_OTHER          Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "INVALID_GENDER",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
	}
	Gender_value = map[string]int32{
		"INVALID_GENDER": 0,
		"MALE":           1,
		"FEMALE":         2,
		"OTHER":          3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[1].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[1]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{1}
}

type ScopeType int32

const (
	ScopeType_INVALID_SCOPE            ScopeType = 0
	ScopeType_DEFAULT_SCOPE            ScopeType = 1
	ScopeType_OFFLINE_ACCESS_SCOPE     ScopeType = 2
	ScopeType_GENDER_SCOPE             ScopeType = 3
	ScopeType_NAME_SCOPE               ScopeType = 4
	ScopeType_BIRTHDAY_SCOPE           ScopeType = 5
	ScopeType_PREFERRED_LANGUAGE_SCOPE ScopeType = 6
	ScopeType_COUNTRY_SCOPE            ScopeType = 7
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "INVALID_SCOPE",
		1: "DEFAULT_SCOPE",
		2: "OFFLINE_ACCESS_SCOPE",
		3: "GENDER_SCOPE",
		4: "NAME_SCOPE",
		5: "BIRTHDAY_SCOPE",
		6: "PREFERRED_LANGUAGE_SCOPE",
		7: "COUNTRY_SCOPE",
	}
	ScopeType_value = map[string]int32{
		"INVALID_SCOPE":            0,
		"DEFAULT_SCOPE":            1,
		"OFFLINE_ACCESS_SCOPE":     2,
		"GENDER_SCOPE":             3,
		"NAME_SCOPE":               4,
		"BIRTHDAY_SCOPE":           5,
		"PREFERRED_LANGUAGE_SCOPE": 6,
		"COUNTRY_SCOPE":            7,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[2].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[2]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{2}
}

type AgeGroup int32

const (
	AgeGroup_AGE_GROUP_INVALID AgeGroup = 0
	AgeGroup_AGE_GROUP_1_12    AgeGroup = 1
	AgeGroup_AGE_GROUP_13_19   AgeGroup = 2
	AgeGroup_AGE_GROUP_20_29   AgeGroup = 3
	AgeGroup_AGE_GROUP_30_39   AgeGroup = 4
	AgeGroup_AGE_GROUP_40_49   AgeGroup = 5
	AgeGroup_AGE_GROUP_50_59   AgeGroup = 6
	AgeGroup_AGE_GROUP_60_69   AgeGroup = 7
	AgeGroup_AGE_GROUP_70_79   AgeGroup = 8
	AgeGroup_AGE_GROUP_80_89   AgeGroup = 9
	AgeGroup_AGE_GROUP_90_99   AgeGroup = 10
	AgeGroup_AGE_GROUP_100_120 AgeGroup = 11
)

// Enum value maps for AgeGroup.
var (
	AgeGroup_name = map[int32]string{
		0:  "AGE_GROUP_INVALID",
		1:  "AGE_GROUP_1_12",
		2:  "AGE_GROUP_13_19",
		3:  "AGE_GROUP_20_29",
		4:  "AGE_GROUP_30_39",
		5:  "AGE_GROUP_40_49",
		6:  "AGE_GROUP_50_59",
		7:  "AGE_GROUP_60_69",
		8:  "AGE_GROUP_70_79",
		9:  "AGE_GROUP_80_89",
		10: "AGE_GROUP_90_99",
		11: "AGE_GROUP_100_120",
	}
	AgeGroup_value = map[string]int32{
		"AGE_GROUP_INVALID": 0,
		"AGE_GROUP_1_12":    1,
		"AGE_GROUP_13_19":   2,
		"AGE_GROUP_20_29":   3,
		"AGE_GROUP_30_39":   4,
		"AGE_GROUP_40_49":   5,
		"AGE_GROUP_50_59":   6,
		"AGE_GROUP_60_69":   7,
		"AGE_GROUP_70_79":   8,
		"AGE_GROUP_80_89":   9,
		"AGE_GROUP_90_99":   10,
		"AGE_GROUP_100_120": 11,
	}
)

func (x AgeGroup) Enum() *AgeGroup {
	p := new(AgeGroup)
	*p = x
	return p
}

func (x AgeGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgeGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[3].Descriptor()
}

func (AgeGroup) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[3]
}

func (x AgeGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgeGroup.Descriptor instead.
func (AgeGroup) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{3}
}

type CollaborationType int32

const (
	CollaborationType_INVALID_COLLABORATION      CollaborationType = 0
	CollaborationType_ORGANIZATION_COLLABORATION CollaborationType = 1
	CollaborationType_CONNECT_COLLABORATION      CollaborationType = 2
)

// Enum value maps for CollaborationType.
var (
	CollaborationType_name = map[int32]string{
		0: "INVALID_COLLABORATION",
		1: "ORGANIZATION_COLLABORATION",
		2: "CONNECT_COLLABORATION",
	}
	CollaborationType_value = map[string]int32{
		"INVALID_COLLABORATION":      0,
		"ORGANIZATION_COLLABORATION": 1,
		"CONNECT_COLLABORATION":      2,
	}
)

func (x CollaborationType) Enum() *CollaborationType {
	p := new(CollaborationType)
	*p = x
	return p
}

func (x CollaborationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollaborationType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[4].Descriptor()
}

func (CollaborationType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[4]
}

func (x CollaborationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollaborationType.Descriptor instead.
func (CollaborationType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{4}
}

type GrantType int32

const (
	GrantType_INVALID_GRANT GrantType = 0
	GrantType_AUTH_GRANT    GrantType = 1
	GrantType_REFRESH_GRANT GrantType = 2
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "INVALID_GRANT",
		1: "AUTH_GRANT",
		2: "REFRESH_GRANT",
	}
	GrantType_value = map[string]int32{
		"INVALID_GRANT": 0,
		"AUTH_GRANT":    1,
		"REFRESH_GRANT": 2,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[5].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[5]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{5}
}

type ResponeType int32

const (
	ResponeType_INVALID_RESPONSE ResponeType = 0
	ResponeType_CODE_RESPONSE    ResponeType = 1
	ResponeType_TOKEN_RESPONSE   ResponeType = 2
	ResponeType_ID_RESPONSE      ResponeType = 3
)

// Enum value maps for ResponeType.
var (
	ResponeType_name = map[int32]string{
		0: "INVALID_RESPONSE",
		1: "CODE_RESPONSE",
		2: "TOKEN_RESPONSE",
		3: "ID_RESPONSE",
	}
	ResponeType_value = map[string]int32{
		"INVALID_RESPONSE": 0,
		"CODE_RESPONSE":    1,
		"TOKEN_RESPONSE":   2,
		"ID_RESPONSE":      3,
	}
)

func (x ResponeType) Enum() *ResponeType {
	p := new(ResponeType)
	*p = x
	return p
}

func (x ResponeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponeType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[6].Descriptor()
}

func (ResponeType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[6]
}

func (x ResponeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponeType.Descriptor instead.
func (ResponeType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{6}
}

type LanguageCodeType int32

const (
	LanguageCodeType_INVALID_LANGUAGE LanguageCodeType = 0
	LanguageCodeType_LANGUAGE_DK      LanguageCodeType = 1
	LanguageCodeType_LANGUAGE_EN      LanguageCodeType = 2
)

// Enum value maps for LanguageCodeType.
var (
	LanguageCodeType_name = map[int32]string{
		0: "INVALID_LANGUAGE",
		1: "LANGUAGE_DK",
		2: "LANGUAGE_EN",
	}
	LanguageCodeType_value = map[string]int32{
		"INVALID_LANGUAGE": 0,
		"LANGUAGE_DK":      1,
		"LANGUAGE_EN":      2,
	}
)

func (x LanguageCodeType) Enum() *LanguageCodeType {
	p := new(LanguageCodeType)
	*p = x
	return p
}

func (x LanguageCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[7].Descriptor()
}

func (LanguageCodeType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[7]
}

func (x LanguageCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageCodeType.Descriptor instead.
func (LanguageCodeType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{7}
}

type CountryCodeType int32

const (
	CountryCodeType_INVALID_COUNTRY CountryCodeType = 0
	CountryCodeType_COUTRY_DK       CountryCodeType = 1
	CountryCodeType_COUNTRY_NO      CountryCodeType = 2
	CountryCodeType_COUNTRY_DE      CountryCodeType = 3
)

// Enum value maps for CountryCodeType.
var (
	CountryCodeType_name = map[int32]string{
		0: "INVALID_COUNTRY",
		1: "COUTRY_DK",
		2: "COUNTRY_NO",
		3: "COUNTRY_DE",
	}
	CountryCodeType_value = map[string]int32{
		"INVALID_COUNTRY": 0,
		"COUTRY_DK":       1,
		"COUNTRY_NO":      2,
		"COUNTRY_DE":      3,
	}
)

func (x CountryCodeType) Enum() *CountryCodeType {
	p := new(CountryCodeType)
	*p = x
	return p
}

func (x CountryCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountryCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[8].Descriptor()
}

func (CountryCodeType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[8]
}

func (x CountryCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountryCodeType.Descriptor instead.
func (CountryCodeType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{8}
}

type SsnProviderType int32

const (
	SsnProviderType_INVALID SsnProviderType = 0
	SsnProviderType_MIT_ID  SsnProviderType = 1
)

// Enum value maps for SsnProviderType.
var (
	SsnProviderType_name = map[int32]string{
		0: "INVALID",
		1: "MIT_ID",
	}
	SsnProviderType_value = map[string]int32{
		"INVALID": 0,
		"MIT_ID":  1,
	}
)

func (x SsnProviderType) Enum() *SsnProviderType {
	p := new(SsnProviderType)
	*p = x
	return p
}

func (x SsnProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SsnProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_softcorp_proto_enumTypes[9].Descriptor()
}

func (SsnProviderType) Type() protoreflect.EnumType {
	return &file_softcorp_proto_enumTypes[9]
}

func (x SsnProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SsnProviderType.Descriptor instead.
func (SsnProviderType) EnumDescriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{9}
}

type ConnectMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	NumberOfRequests         int32                  `protobuf:"varint,2,opt,name=numberOfRequests,proto3" json:"numberOfRequests,omitempty"`
	NumberOfConsentTrue      int32                  `protobuf:"varint,3,opt,name=numberOfConsentTrue,proto3" json:"numberOfConsentTrue,omitempty"`
	NumberOfConsentFalse     int32                  `protobuf:"varint,4,opt,name=numberOfConsentFalse,proto3" json:"numberOfConsentFalse,omitempty"`
	NumberOfAgeGroup1To12    int32                  `protobuf:"varint,5,opt,name=numberOfAgeGroup1To12,proto3" json:"numberOfAgeGroup1To12,omitempty"`
	NumberOfAgeGroup13To19   int32                  `protobuf:"varint,6,opt,name=numberOfAgeGroup13To19,proto3" json:"numberOfAgeGroup13To19,omitempty"`
	NumberOfAgeGroup20To29   int32                  `protobuf:"varint,7,opt,name=numberOfAgeGroup20To29,proto3" json:"numberOfAgeGroup20To29,omitempty"`
	NumberOfAgeGroup30To39   int32                  `protobuf:"varint,8,opt,name=numberOfAgeGroup30To39,proto3" json:"numberOfAgeGroup30To39,omitempty"`
	NumberOfAgeGroup40To49   int32                  `protobuf:"varint,9,opt,name=numberOfAgeGroup40To49,proto3" json:"numberOfAgeGroup40To49,omitempty"`
	NumberOfAgeGroup50To59   int32                  `protobuf:"varint,10,opt,name=numberOfAgeGroup50To59,proto3" json:"numberOfAgeGroup50To59,omitempty"`
	NumberOfAgeGroup60To69   int32                  `protobuf:"varint,11,opt,name=numberOfAgeGroup60To69,proto3" json:"numberOfAgeGroup60To69,omitempty"`
	NumberOfAgeGroup70To79   int32                  `protobuf:"varint,12,opt,name=numberOfAgeGroup70To79,proto3" json:"numberOfAgeGroup70To79,omitempty"`
	NumberOfAgeGroup80To89   int32                  `protobuf:"varint,13,opt,name=numberOfAgeGroup80To89,proto3" json:"numberOfAgeGroup80To89,omitempty"`
	NumberOfAgeGroup90To99   int32                  `protobuf:"varint,14,opt,name=numberOfAgeGroup90To99,proto3" json:"numberOfAgeGroup90To99,omitempty"`
	NumberOfAgeGroup100To120 int32                  `protobuf:"varint,15,opt,name=numberOfAgeGroup100To120,proto3" json:"numberOfAgeGroup100To120,omitempty"`
	NumberOfFemales          int32                  `protobuf:"varint,16,opt,name=numberOfFemales,proto3" json:"numberOfFemales,omitempty"`
	NumberOfMales            int32                  `protobuf:"varint,17,opt,name=numberOfMales,proto3" json:"numberOfMales,omitempty"`
	NumberOfOthers           int32                  `protobuf:"varint,18,opt,name=numberOfOthers,proto3" json:"numberOfOthers,omitempty"`
	AmountFromDk             int32                  `protobuf:"varint,19,opt,name=amountFromDk,proto3" json:"amountFromDk,omitempty"`
	AmountFromNo             int32                  `protobuf:"varint,20,opt,name=amountFromNo,proto3" json:"amountFromNo,omitempty"`
	AmountFromDe             int32                  `protobuf:"varint,21,opt,name=amountFromDe,proto3" json:"amountFromDe,omitempty"`
}

func (x *ConnectMetric) Reset() {
	*x = ConnectMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMetric) ProtoMessage() {}

func (x *ConnectMetric) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMetric.ProtoReflect.Descriptor instead.
func (*ConnectMetric) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectMetric) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ConnectMetric) GetNumberOfRequests() int32 {
	if x != nil {
		return x.NumberOfRequests
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfConsentTrue() int32 {
	if x != nil {
		return x.NumberOfConsentTrue
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfConsentFalse() int32 {
	if x != nil {
		return x.NumberOfConsentFalse
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup1To12() int32 {
	if x != nil {
		return x.NumberOfAgeGroup1To12
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup13To19() int32 {
	if x != nil {
		return x.NumberOfAgeGroup13To19
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup20To29() int32 {
	if x != nil {
		return x.NumberOfAgeGroup20To29
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup30To39() int32 {
	if x != nil {
		return x.NumberOfAgeGroup30To39
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup40To49() int32 {
	if x != nil {
		return x.NumberOfAgeGroup40To49
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup50To59() int32 {
	if x != nil {
		return x.NumberOfAgeGroup50To59
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup60To69() int32 {
	if x != nil {
		return x.NumberOfAgeGroup60To69
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup70To79() int32 {
	if x != nil {
		return x.NumberOfAgeGroup70To79
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup80To89() int32 {
	if x != nil {
		return x.NumberOfAgeGroup80To89
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup90To99() int32 {
	if x != nil {
		return x.NumberOfAgeGroup90To99
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup100To120() int32 {
	if x != nil {
		return x.NumberOfAgeGroup100To120
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfFemales() int32 {
	if x != nil {
		return x.NumberOfFemales
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfMales() int32 {
	if x != nil {
		return x.NumberOfMales
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfOthers() int32 {
	if x != nil {
		return x.NumberOfOthers
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromDk() int32 {
	if x != nil {
		return x.AmountFromDk
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromNo() int32 {
	if x != nil {
		return x.AmountFromNo
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromDe() int32 {
	if x != nil {
		return x.AmountFromDe
	}
	return 0
}

type ConnectMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*ConnectMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ConnectMetrics) Reset() {
	*x = ConnectMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMetrics) ProtoMessage() {}

func (x *ConnectMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMetrics.ProtoReflect.Descriptor instead.
func (*ConnectMetrics) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectMetrics) GetMetrics() []*ConnectMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Collaboration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ObjectId          string                 `protobuf:"bytes,3,opt,name=objectId,proto3" json:"objectId,omitempty"`
	CollaborationType CollaborationType      `protobuf:"varint,4,opt,name=collaborationType,proto3,enum=Softcorp.CollaborationType" json:"collaborationType,omitempty"`
	Accepted          bool                   `protobuf:"varint,5,opt,name=accepted,proto3" json:"accepted,omitempty"`
	HashedCode        string                 `protobuf:"bytes,6,opt,name=hashedCode,proto3" json:"hashedCode,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Collaboration) Reset() {
	*x = Collaboration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collaboration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collaboration) ProtoMessage() {}

func (x *Collaboration) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collaboration.ProtoReflect.Descriptor instead.
func (*Collaboration) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{2}
}

func (x *Collaboration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collaboration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Collaboration) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *Collaboration) GetCollaborationType() CollaborationType {
	if x != nil {
		return x.CollaborationType
	}
	return CollaborationType_INVALID_COLLABORATION
}

func (x *Collaboration) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *Collaboration) GetHashedCode() string {
	if x != nil {
		return x.HashedCode
	}
	return ""
}

func (x *Collaboration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Collaboration) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId          string                 `protobuf:"bytes,2,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	OrganizationName string                 `protobuf:"bytes,3,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	ContactEmail     string                 `protobuf:"bytes,4,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	IsOwner          bool                   `protobuf:"varint,7,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
	Collaborations   []*Collaboration       `protobuf:"bytes,8,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{3}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Organization) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *Organization) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Organization) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Organization) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Organization) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *Organization) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType        ScopeType `protobuf:"varint,1,opt,name=scopeType,proto3,enum=Softcorp.ScopeType" json:"scopeType,omitempty"`
	ReadId           bool      `protobuf:"varint,2,opt,name=readId,proto3" json:"readId,omitempty"`
	ReadEmail        bool      `protobuf:"varint,3,opt,name=readEmail,proto3" json:"readEmail,omitempty"`
	ReadGender       bool      `protobuf:"varint,4,opt,name=readGender,proto3" json:"readGender,omitempty"`
	ReadCreatedAt    bool      `protobuf:"varint,5,opt,name=readCreatedAt,proto3" json:"readCreatedAt,omitempty"`
	OfflineAccess    bool      `protobuf:"varint,6,opt,name=offlineAccess,proto3" json:"offlineAccess,omitempty"`
	ReadName         bool      `protobuf:"varint,7,opt,name=readName,proto3" json:"readName,omitempty"`
	ReadBirthday     bool      `protobuf:"varint,8,opt,name=readBirthday,proto3" json:"readBirthday,omitempty"`
	ReadCountry      bool      `protobuf:"varint,9,opt,name=readCountry,proto3" json:"readCountry,omitempty"`
	ReadPrefLangauge bool      `protobuf:"varint,10,opt,name=readPrefLangauge,proto3" json:"readPrefLangauge,omitempty"`
	Name             string    `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Key              string    `protobuf:"bytes,12,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{4}
}

func (x *Scope) GetScopeType() ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeType_INVALID_SCOPE
}

func (x *Scope) GetReadId() bool {
	if x != nil {
		return x.ReadId
	}
	return false
}

func (x *Scope) GetReadEmail() bool {
	if x != nil {
		return x.ReadEmail
	}
	return false
}

func (x *Scope) GetReadGender() bool {
	if x != nil {
		return x.ReadGender
	}
	return false
}

func (x *Scope) GetReadCreatedAt() bool {
	if x != nil {
		return x.ReadCreatedAt
	}
	return false
}

func (x *Scope) GetOfflineAccess() bool {
	if x != nil {
		return x.OfflineAccess
	}
	return false
}

func (x *Scope) GetReadName() bool {
	if x != nil {
		return x.ReadName
	}
	return false
}

func (x *Scope) GetReadBirthday() bool {
	if x != nil {
		return x.ReadBirthday
	}
	return false
}

func (x *Scope) GetReadCountry() bool {
	if x != nil {
		return x.ReadCountry
	}
	return false
}

func (x *Scope) GetReadPrefLangauge() bool {
	if x != nil {
		return x.ReadPrefLangauge
	}
	return false
}

func (x *Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scope) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantType GrantType `protobuf:"varint,1,opt,name=grantType,proto3,enum=Softcorp.GrantType" json:"grantType,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{5}
}

func (x *Grant) GetGrantType() GrantType {
	if x != nil {
		return x.GrantType
	}
	return GrantType_INVALID_GRANT
}

func (x *Grant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OauthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseType ResponeType `protobuf:"varint,1,opt,name=responseType,proto3,enum=Softcorp.ResponeType" json:"responseType,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OauthResponse) Reset() {
	*x = OauthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthResponse) ProtoMessage() {}

func (x *OauthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthResponse.ProtoReflect.Descriptor instead.
func (*OauthResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{6}
}

func (x *OauthResponse) GetResponseType() ResponeType {
	if x != nil {
		return x.ResponseType
	}
	return ResponeType_INVALID_RESPONSE
}

func (x *OauthResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LanguageCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageCodeType LanguageCodeType `protobuf:"varint,1,opt,name=languageCodeType,proto3,enum=Softcorp.LanguageCodeType" json:"languageCodeType,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LanguageCode) Reset() {
	*x = LanguageCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageCode) ProtoMessage() {}

func (x *LanguageCode) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageCode.ProtoReflect.Descriptor instead.
func (*LanguageCode) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{7}
}

func (x *LanguageCode) GetLanguageCodeType() LanguageCodeType {
	if x != nil {
		return x.LanguageCodeType
	}
	return LanguageCodeType_INVALID_LANGUAGE
}

func (x *LanguageCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CountryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCodeType CountryCodeType `protobuf:"varint,1,opt,name=countryCodeType,proto3,enum=Softcorp.CountryCodeType" json:"countryCodeType,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CountryCode) Reset() {
	*x = CountryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryCode) ProtoMessage() {}

func (x *CountryCode) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryCode.ProtoReflect.Descriptor instead.
func (*CountryCode) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{8}
}

func (x *CountryCode) GetCountryCodeType() CountryCodeType {
	if x != nil {
		return x.CountryCodeType
	}
	return CountryCodeType_INVALID_COUNTRY
}

func (x *CountryCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SsnProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsnProviderType SsnProviderType `protobuf:"varint,1,opt,name=ssnProviderType,proto3,enum=Softcorp.SsnProviderType" json:"ssnProviderType,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SsnProvider) Reset() {
	*x = SsnProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsnProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsnProvider) ProtoMessage() {}

func (x *SsnProvider) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsnProvider.ProtoReflect.Descriptor instead.
func (*SsnProvider) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{9}
}

func (x *SsnProvider) GetSsnProviderType() SsnProviderType {
	if x != nil {
		return x.SsnProviderType
	}
	return SsnProviderType_INVALID
}

func (x *SsnProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Ssn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssn           string       `protobuf:"bytes,1,opt,name=ssn,proto3" json:"ssn,omitempty"`
	SsnHash       string       `protobuf:"bytes,2,opt,name=ssnHash,proto3" json:"ssnHash,omitempty"`
	SsnIdentifier string       `protobuf:"bytes,3,opt,name=ssnIdentifier,proto3" json:"ssnIdentifier,omitempty"`
	SsnProvider   *SsnProvider `protobuf:"bytes,4,opt,name=ssnProvider,proto3" json:"ssnProvider,omitempty"`
}

func (x *Ssn) Reset() {
	*x = Ssn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ssn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ssn) ProtoMessage() {}

func (x *Ssn) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ssn.ProtoReflect.Descriptor instead.
func (*Ssn) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{10}
}

func (x *Ssn) GetSsn() string {
	if x != nil {
		return x.Ssn
	}
	return ""
}

func (x *Ssn) GetSsnHash() string {
	if x != nil {
		return x.SsnHash
	}
	return ""
}

func (x *Ssn) GetSsnIdentifier() string {
	if x != nil {
		return x.SsnIdentifier
	}
	return ""
}

func (x *Ssn) GetSsnProvider() *SsnProvider {
	if x != nil {
		return x.SsnProvider
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email             string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password          string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Gender            Gender                 `protobuf:"varint,4,opt,name=gender,proto3,enum=Softcorp.Gender" json:"gender,omitempty"`
	Birthday          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Country           *CountryCode           `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Blocked           bool                   `protobuf:"varint,7,opt,name=blocked,proto3" json:"blocked,omitempty"`
	PreferredLanguage *LanguageCode          `protobuf:"bytes,8,opt,name=preferredLanguage,proto3" json:"preferredLanguage,omitempty"`
	Name              string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	SsnId             string                 `protobuf:"bytes,12,opt,name=ssnId,proto3" json:"ssnId,omitempty"`
	SsnHash           string                 `protobuf:"bytes,13,opt,name=ssnHash,proto3" json:"ssnHash,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{11}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_INVALID_GENDER
}

func (x *User) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *User) GetCountry() *CountryCode {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *User) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *User) GetPreferredLanguage() *LanguageCode {
	if x != nil {
		return x.PreferredLanguage
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetSsnId() string {
	if x != nil {
		return x.SsnId
	}
	return ""
}

func (x *User) GetSsnHash() string {
	if x != nil {
		return x.SsnHash
	}
	return ""
}

type ClientMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen           bool           `protobuf:"varint,1,opt,name=isOpen,proto3" json:"isOpen,omitempty"`
	AllowedEmails    []string       `protobuf:"bytes,21,rep,name=allowedEmails,proto3" json:"allowedEmails,omitempty"`
	About            string         `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	UserOwnerId      string         `protobuf:"bytes,4,opt,name=userOwnerId,proto3" json:"userOwnerId,omitempty"`
	AgeLowerLimit    int32          `protobuf:"varint,5,opt,name=ageLowerLimit,proto3" json:"ageLowerLimit,omitempty"`
	AgeUpperLimit    int32          `protobuf:"varint,6,opt,name=ageUpperLimit,proto3" json:"ageUpperLimit,omitempty"`
	AllowedCountries []*CountryCode `protobuf:"bytes,7,rep,name=allowedCountries,proto3" json:"allowedCountries,omitempty"`
}

func (x *ClientMetadata) Reset() {
	*x = ClientMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMetadata) ProtoMessage() {}

func (x *ClientMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMetadata.ProtoReflect.Descriptor instead.
func (*ClientMetadata) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{12}
}

func (x *ClientMetadata) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ClientMetadata) GetAllowedEmails() []string {
	if x != nil {
		return x.AllowedEmails
	}
	return nil
}

func (x *ClientMetadata) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ClientMetadata) GetUserOwnerId() string {
	if x != nil {
		return x.UserOwnerId
	}
	return ""
}

func (x *ClientMetadata) GetAgeLowerLimit() int32 {
	if x != nil {
		return x.AgeLowerLimit
	}
	return 0
}

func (x *ClientMetadata) GetAgeUpperLimit() int32 {
	if x != nil {
		return x.AgeUpperLimit
	}
	return 0
}

func (x *ClientMetadata) GetAllowedCountries() []*CountryCode {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

type ClientApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password           string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ContactEmail       string                 `protobuf:"bytes,4,opt,name=contactEmail,proto3" json:"contactEmail,omitempty"`
	OwnerId            string                 `protobuf:"bytes,5,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	AppWebsite         string                 `protobuf:"bytes,6,opt,name=appWebsite,proto3" json:"appWebsite,omitempty"`
	LogoUrl            string                 `protobuf:"bytes,7,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	TermsUrl           string                 `protobuf:"bytes,8,opt,name=termsUrl,proto3" json:"termsUrl,omitempty"`
	ClientMetadata     *ClientMetadata        `protobuf:"bytes,9,opt,name=clientMetadata,proto3" json:"clientMetadata,omitempty"`
	Audience           []string               `protobuf:"bytes,10,rep,name=audience,proto3" json:"audience,omitempty"`
	Scopes             []*Scope               `protobuf:"bytes,11,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Grants             []*Grant               `protobuf:"bytes,12,rep,name=grants,proto3" json:"grants,omitempty"`
	Responses          []*OauthResponse       `protobuf:"bytes,13,rep,name=responses,proto3" json:"responses,omitempty"`
	Callbacks          []string               `protobuf:"bytes,14,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AvailableScopes    []*Scope               `protobuf:"bytes,17,rep,name=availableScopes,proto3" json:"availableScopes,omitempty"`
	AvailableGrants    []*Grant               `protobuf:"bytes,18,rep,name=availableGrants,proto3" json:"availableGrants,omitempty"`
	AvailableResponses []*OauthResponse       `protobuf:"bytes,19,rep,name=availableResponses,proto3" json:"availableResponses,omitempty"`
	AvailableCountries []*CountryCode         `protobuf:"bytes,20,rep,name=availableCountries,proto3" json:"availableCountries,omitempty"`
	AdvancedScopes     []*Scope               `protobuf:"bytes,21,rep,name=advancedScopes,proto3" json:"advancedScopes,omitempty"`
	Collaborations     []*Collaboration       `protobuf:"bytes,22,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
}

func (x *ClientApp) Reset() {
	*x = ClientApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientApp) ProtoMessage() {}

func (x *ClientApp) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientApp.ProtoReflect.Descriptor instead.
func (*ClientApp) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{13}
}

func (x *ClientApp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientApp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClientApp) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *ClientApp) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ClientApp) GetAppWebsite() string {
	if x != nil {
		return x.AppWebsite
	}
	return ""
}

func (x *ClientApp) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ClientApp) GetTermsUrl() string {
	if x != nil {
		return x.TermsUrl
	}
	return ""
}

func (x *ClientApp) GetClientMetadata() *ClientMetadata {
	if x != nil {
		return x.ClientMetadata
	}
	return nil
}

func (x *ClientApp) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *ClientApp) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ClientApp) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *ClientApp) GetResponses() []*OauthResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *ClientApp) GetCallbacks() []string {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *ClientApp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ClientApp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ClientApp) GetAvailableScopes() []*Scope {
	if x != nil {
		return x.AvailableScopes
	}
	return nil
}

func (x *ClientApp) GetAvailableGrants() []*Grant {
	if x != nil {
		return x.AvailableGrants
	}
	return nil
}

func (x *ClientApp) GetAvailableResponses() []*OauthResponse {
	if x != nil {
		return x.AvailableResponses
	}
	return nil
}

func (x *ClientApp) GetAvailableCountries() []*CountryCode {
	if x != nil {
		return x.AvailableCountries
	}
	return nil
}

func (x *ClientApp) GetAdvancedScopes() []*Scope {
	if x != nil {
		return x.AdvancedScopes
	}
	return nil
}

func (x *ClientApp) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

type PublicUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PublicUserRequest) Reset() {
	*x = PublicUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicUserRequest) ProtoMessage() {}

func (x *PublicUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicUserRequest.ProtoReflect.Descriptor instead.
func (*PublicUserRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{14}
}

func (x *PublicUserRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PublicUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *PublicUserResponse) Reset() {
	*x = PublicUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicUserResponse) ProtoMessage() {}

func (x *PublicUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicUserResponse.ProtoReflect.Descriptor instead.
func (*PublicUserResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{15}
}

func (x *PublicUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AdminUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Email       string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Ids         []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	Emails      []string `protobuf:"bytes,4,rep,name=emails,proto3" json:"emails,omitempty"`
	Decrypt     bool     `protobuf:"varint,5,opt,name=decrypt,proto3" json:"decrypt,omitempty"`
	User        *User    `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	OverwriteId bool     `protobuf:"varint,7,opt,name=overwriteId,proto3" json:"overwriteId,omitempty"`
}

func (x *AdminUserRequest) Reset() {
	*x = AdminUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUserRequest) ProtoMessage() {}

func (x *AdminUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUserRequest.ProtoReflect.Descriptor instead.
func (*AdminUserRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{16}
}

func (x *AdminUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AdminUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AdminUserRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *AdminUserRequest) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *AdminUserRequest) GetDecrypt() bool {
	if x != nil {
		return x.Decrypt
	}
	return false
}

func (x *AdminUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AdminUserRequest) GetOverwriteId() bool {
	if x != nil {
		return x.OverwriteId
	}
	return false
}

type AdminUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *AdminUserResponse) Reset() {
	*x = AdminUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUserResponse) ProtoMessage() {}

func (x *AdminUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUserResponse.ProtoReflect.Descriptor instead.
func (*AdminUserResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{17}
}

func (x *AdminUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AdminUserResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type AuthPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge   string       `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Email       string       `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password    string       `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Gender      Gender       `protobuf:"varint,4,opt,name=gender,proto3,enum=Softcorp.Gender" json:"gender,omitempty"`
	Consent     bool         `protobuf:"varint,5,opt,name=consent,proto3" json:"consent,omitempty"`
	JwtIdToken  string       `protobuf:"bytes,6,opt,name=jwtIdToken,proto3" json:"jwtIdToken,omitempty"`
	SsnProvider *SsnProvider `protobuf:"bytes,7,opt,name=ssnProvider,proto3" json:"ssnProvider,omitempty"`
}

func (x *AuthPublicRequest) Reset() {
	*x = AuthPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPublicRequest) ProtoMessage() {}

func (x *AuthPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPublicRequest.ProtoReflect.Descriptor instead.
func (*AuthPublicRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{18}
}

func (x *AuthPublicRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *AuthPublicRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AuthPublicRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthPublicRequest) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_INVALID_GENDER
}

func (x *AuthPublicRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

func (x *AuthPublicRequest) GetJwtIdToken() string {
	if x != nil {
		return x.JwtIdToken
	}
	return ""
}

func (x *AuthPublicRequest) GetSsnProvider() *SsnProvider {
	if x != nil {
		return x.SsnProvider
	}
	return nil
}

type AuthPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client       *ClientApp `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	NameOfUser   string     `protobuf:"bytes,2,opt,name=nameOfUser,proto3" json:"nameOfUser,omitempty"`
	RedirectAddr string     `protobuf:"bytes,3,opt,name=redirectAddr,proto3" json:"redirectAddr,omitempty"`
}

func (x *AuthPublicResponse) Reset() {
	*x = AuthPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPublicResponse) ProtoMessage() {}

func (x *AuthPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPublicResponse.ProtoReflect.Descriptor instead.
func (*AuthPublicResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{19}
}

func (x *AuthPublicResponse) GetClient() *ClientApp {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *AuthPublicResponse) GetNameOfUser() string {
	if x != nil {
		return x.NameOfUser
	}
	return ""
}

func (x *AuthPublicResponse) GetRedirectAddr() string {
	if x != nil {
		return x.RedirectAddr
	}
	return ""
}

type ConnectAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App         *ClientApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	OverwriteId bool       `protobuf:"varint,2,opt,name=overwriteId,proto3" json:"overwriteId,omitempty"`
	Timespan    Timespan   `protobuf:"varint,3,opt,name=timespan,proto3,enum=Softcorp.Timespan" json:"timespan,omitempty"`
}

func (x *ConnectAdminRequest) Reset() {
	*x = ConnectAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminRequest) ProtoMessage() {}

func (x *ConnectAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminRequest.ProtoReflect.Descriptor instead.
func (*ConnectAdminRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectAdminRequest) GetApp() *ClientApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ConnectAdminRequest) GetOverwriteId() bool {
	if x != nil {
		return x.OverwriteId
	}
	return false
}

func (x *ConnectAdminRequest) GetTimespan() Timespan {
	if x != nil {
		return x.Timespan
	}
	return Timespan_INVALID_TIMESPAN
}

type ConnectAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App     *ClientApp                `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Metrics map[int32]*ConnectMetrics `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectAdminResponse) Reset() {
	*x = ConnectAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminResponse) ProtoMessage() {}

func (x *ConnectAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminResponse.ProtoReflect.Descriptor instead.
func (*ConnectAdminResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{21}
}

func (x *ConnectAdminResponse) GetApp() *ClientApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ConnectAdminResponse) GetMetrics() map[int32]*ConnectMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type PublicDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken         string         `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	Organization        *Organization  `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	ConnectApp          *ClientApp     `protobuf:"bytes,3,opt,name=connectApp,proto3" json:"connectApp,omitempty"`
	Timespan            Timespan       `protobuf:"varint,4,opt,name=timespan,proto3,enum=Softcorp.Timespan" json:"timespan,omitempty"`
	Collaboration       *Collaboration `protobuf:"bytes,5,opt,name=collaboration,proto3" json:"collaboration,omitempty"`
	EmailOfCollaborator string         `protobuf:"bytes,6,opt,name=emailOfCollaborator,proto3" json:"emailOfCollaborator,omitempty"`
	Secret              string         `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *PublicDashboardRequest) Reset() {
	*x = PublicDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDashboardRequest) ProtoMessage() {}

func (x *PublicDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDashboardRequest.ProtoReflect.Descriptor instead.
func (*PublicDashboardRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{22}
}

func (x *PublicDashboardRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *PublicDashboardRequest) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PublicDashboardRequest) GetConnectApp() *ClientApp {
	if x != nil {
		return x.ConnectApp
	}
	return nil
}

func (x *PublicDashboardRequest) GetTimespan() Timespan {
	if x != nil {
		return x.Timespan
	}
	return Timespan_INVALID_TIMESPAN
}

func (x *PublicDashboardRequest) GetCollaboration() *Collaboration {
	if x != nil {
		return x.Collaboration
	}
	return nil
}

func (x *PublicDashboardRequest) GetEmailOfCollaborator() string {
	if x != nil {
		return x.EmailOfCollaborator
	}
	return ""
}

func (x *PublicDashboardRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type PublicDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization   *Organization             `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Organizations  []*Organization           `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Collaboration  *Collaboration            `protobuf:"bytes,3,opt,name=collaboration,proto3" json:"collaboration,omitempty"`
	Collaborations []*Collaboration          `protobuf:"bytes,4,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
	Secret         string                    `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	ConnectApp     *ClientApp                `protobuf:"bytes,6,opt,name=connectApp,proto3" json:"connectApp,omitempty"`
	ConnectApps    []*ClientApp              `protobuf:"bytes,7,rep,name=connectApps,proto3" json:"connectApps,omitempty"`
	Metrics        map[int32]*ConnectMetrics `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublicDashboardResponse) Reset() {
	*x = PublicDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDashboardResponse) ProtoMessage() {}

func (x *PublicDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDashboardResponse.ProtoReflect.Descriptor instead.
func (*PublicDashboardResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{23}
}

func (x *PublicDashboardResponse) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PublicDashboardResponse) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *PublicDashboardResponse) GetCollaboration() *Collaboration {
	if x != nil {
		return x.Collaboration
	}
	return nil
}

func (x *PublicDashboardResponse) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

func (x *PublicDashboardResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *PublicDashboardResponse) GetConnectApp() *ClientApp {
	if x != nil {
		return x.ConnectApp
	}
	return nil
}

func (x *PublicDashboardResponse) GetConnectApps() []*ClientApp {
	if x != nil {
		return x.ConnectApps
	}
	return nil
}

func (x *PublicDashboardResponse) GetMetrics() map[int32]*ConnectMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type AdminCollaborationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization        *Organization  `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	ConnectApp          *ClientApp     `protobuf:"bytes,2,opt,name=connectApp,proto3" json:"connectApp,omitempty"`
	AccessToken         string         `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	Collaboration       *Collaboration `protobuf:"bytes,4,opt,name=collaboration,proto3" json:"collaboration,omitempty"`
	AcceptCollaboration bool           `protobuf:"varint,5,opt,name=acceptCollaboration,proto3" json:"acceptCollaboration,omitempty"`
	EmailOfCollaborator string         `protobuf:"bytes,6,opt,name=emailOfCollaborator,proto3" json:"emailOfCollaborator,omitempty"`
	Secret              string         `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`
	OnlyConnect         bool           `protobuf:"varint,8,opt,name=onlyConnect,proto3" json:"onlyConnect,omitempty"`
	OnlyOrganization    bool           `protobuf:"varint,9,opt,name=onlyOrganization,proto3" json:"onlyOrganization,omitempty"`
	OnlyAccepted        bool           `protobuf:"varint,10,opt,name=onlyAccepted,proto3" json:"onlyAccepted,omitempty"`
}

func (x *AdminCollaborationRequest) Reset() {
	*x = AdminCollaborationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCollaborationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCollaborationRequest) ProtoMessage() {}

func (x *AdminCollaborationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCollaborationRequest.ProtoReflect.Descriptor instead.
func (*AdminCollaborationRequest) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{24}
}

func (x *AdminCollaborationRequest) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *AdminCollaborationRequest) GetConnectApp() *ClientApp {
	if x != nil {
		return x.ConnectApp
	}
	return nil
}

func (x *AdminCollaborationRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AdminCollaborationRequest) GetCollaboration() *Collaboration {
	if x != nil {
		return x.Collaboration
	}
	return nil
}

func (x *AdminCollaborationRequest) GetAcceptCollaboration() bool {
	if x != nil {
		return x.AcceptCollaboration
	}
	return false
}

func (x *AdminCollaborationRequest) GetEmailOfCollaborator() string {
	if x != nil {
		return x.EmailOfCollaborator
	}
	return ""
}

func (x *AdminCollaborationRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AdminCollaborationRequest) GetOnlyConnect() bool {
	if x != nil {
		return x.OnlyConnect
	}
	return false
}

func (x *AdminCollaborationRequest) GetOnlyOrganization() bool {
	if x != nil {
		return x.OnlyOrganization
	}
	return false
}

func (x *AdminCollaborationRequest) GetOnlyAccepted() bool {
	if x != nil {
		return x.OnlyAccepted
	}
	return false
}

type AdminCollaborationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collaboration  *Collaboration   `protobuf:"bytes,1,opt,name=collaboration,proto3" json:"collaboration,omitempty"`
	Collaborations []*Collaboration `protobuf:"bytes,2,rep,name=collaborations,proto3" json:"collaborations,omitempty"`
	Secret         string           `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *AdminCollaborationResponse) Reset() {
	*x = AdminCollaborationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCollaborationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCollaborationResponse) ProtoMessage() {}

func (x *AdminCollaborationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCollaborationResponse.ProtoReflect.Descriptor instead.
func (*AdminCollaborationResponse) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{25}
}

func (x *AdminCollaborationResponse) GetCollaboration() *Collaboration {
	if x != nil {
		return x.Collaboration
	}
	return nil
}

func (x *AdminCollaborationResponse) GetCollaborations() []*Collaboration {
	if x != nil {
		return x.Collaborations
	}
	return nil
}

func (x *AdminCollaborationResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{26}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_softcorp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_softcorp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_softcorp_proto_rawDescGZIP(), []int{27}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_softcorp_proto protoreflect.FileDescriptor

var file_softcorp_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x08, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x61,
	0x6c, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x31, 0x54, 0x6f, 0x31, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x31, 0x54, 0x6f, 0x31, 0x32, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x33, 0x54, 0x6f, 0x31, 0x39, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x33, 0x54, 0x6f, 0x31, 0x39, 0x12, 0x36, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x32, 0x30, 0x54, 0x6f, 0x32, 0x39, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32,
	0x30, 0x54, 0x6f, 0x32, 0x39, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x33, 0x30, 0x54, 0x6f, 0x33, 0x39, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x33, 0x30, 0x54, 0x6f, 0x33, 0x39, 0x12, 0x36, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x34, 0x30, 0x54, 0x6f, 0x34, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x34,
	0x30, 0x54, 0x6f, 0x34, 0x39, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x35, 0x30, 0x54, 0x6f, 0x35, 0x39, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x35, 0x30, 0x54, 0x6f, 0x35, 0x39, 0x12, 0x36, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x36, 0x30, 0x54, 0x6f, 0x36, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x36,
	0x30, 0x54, 0x6f, 0x36, 0x39, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x37, 0x30, 0x54, 0x6f, 0x37, 0x39, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x37, 0x30, 0x54, 0x6f, 0x37, 0x39, 0x12, 0x36, 0x0a,
	0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x38, 0x30, 0x54, 0x6f, 0x38, 0x39, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x38,
	0x30, 0x54, 0x6f, 0x38, 0x39, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x39, 0x30, 0x54, 0x6f, 0x39, 0x39, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x39, 0x30, 0x54, 0x6f, 0x39, 0x39, 0x12, 0x3a, 0x0a,
	0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x31, 0x30, 0x30, 0x54, 0x6f, 0x31, 0x32, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x31, 0x30, 0x30, 0x54, 0x6f, 0x31, 0x32, 0x30, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x65, 0x6d, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x22, 0x43, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x03,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x50, 0x72, 0x65, 0x66, 0x4c, 0x61, 0x6e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x4c, 0x61, 0x6e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x4e, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x5e, 0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x6a, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0b, 0x53, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x53, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x03, 0x53, 0x73, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x73, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x73, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x53, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0xf3, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x73, 0x6e, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x73, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x73, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd8, 0x07,
	0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x55, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x40, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x38, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xca, 0x01,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x77, 0x74, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x77, 0x74, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x53, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x0b, 0x73, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x54, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe4, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70,
	0x12, 0x2e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xb7, 0x04, 0x0a, 0x17, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x54, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdb, 0x03, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c,
	0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x2a, 0x7e, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x05, 0x2a, 0x3d, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03,
	0x2a, 0xb2, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45,
	0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x07, 0x2a, 0x89, 0x02, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x33, 0x5f, 0x31, 0x39,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x32, 0x30, 0x5f, 0x32, 0x39, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x33, 0x30, 0x5f, 0x33, 0x39, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x34, 0x30, 0x5f, 0x34, 0x39, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x35,
	0x30, 0x5f, 0x35, 0x39, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x36, 0x30, 0x5f, 0x36, 0x39, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x37, 0x30, 0x5f, 0x37, 0x39, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x38, 0x30,
	0x5f, 0x38, 0x39, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x39, 0x30, 0x5f, 0x39, 0x39, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x31, 0x32, 0x30, 0x10,
	0x0b, 0x2a, 0x69, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x09,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x2a,
	0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x10,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x4b, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x10, 0x03, 0x2a,
	0x2a, 0x0a, 0x0f, 0x53, 0x73, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x32, 0xca, 0x05, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x17,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0b, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd3, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1d,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x1d, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1d, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd2,
	0x03, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xc4, 0x03, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x11, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4d, 0x0a, 0x1a, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x11, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfc, 0x07, 0x0a, 0x19, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x11, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x85, 0x0d, 0x0a, 0x16, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70,
	0x70, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x20,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x53, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x63, 0x6f, 0x72,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_softcorp_proto_rawDescOnce sync.Once
	file_softcorp_proto_rawDescData = file_softcorp_proto_rawDesc
)

func file_softcorp_proto_rawDescGZIP() []byte {
	file_softcorp_proto_rawDescOnce.Do(func() {
		file_softcorp_proto_rawDescData = protoimpl.X.CompressGZIP(file_softcorp_proto_rawDescData)
	})
	return file_softcorp_proto_rawDescData
}

var file_softcorp_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_softcorp_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_softcorp_proto_goTypes = []interface{}{
	(Timespan)(0),                      // 0: Softcorp.Timespan
	(Gender)(0),                        // 1: Softcorp.Gender
	(ScopeType)(0),                     // 2: Softcorp.ScopeType
	(AgeGroup)(0),                      // 3: Softcorp.AgeGroup
	(CollaborationType)(0),             // 4: Softcorp.CollaborationType
	(GrantType)(0),                     // 5: Softcorp.GrantType
	(ResponeType)(0),                   // 6: Softcorp.ResponeType
	(LanguageCodeType)(0),              // 7: Softcorp.LanguageCodeType
	(CountryCodeType)(0),               // 8: Softcorp.CountryCodeType
	(SsnProviderType)(0),               // 9: Softcorp.SsnProviderType
	(*ConnectMetric)(nil),              // 10: Softcorp.ConnectMetric
	(*ConnectMetrics)(nil),             // 11: Softcorp.ConnectMetrics
	(*Collaboration)(nil),              // 12: Softcorp.Collaboration
	(*Organization)(nil),               // 13: Softcorp.Organization
	(*Scope)(nil),                      // 14: Softcorp.Scope
	(*Grant)(nil),                      // 15: Softcorp.Grant
	(*OauthResponse)(nil),              // 16: Softcorp.OauthResponse
	(*LanguageCode)(nil),               // 17: Softcorp.LanguageCode
	(*CountryCode)(nil),                // 18: Softcorp.CountryCode
	(*SsnProvider)(nil),                // 19: Softcorp.SsnProvider
	(*Ssn)(nil),                        // 20: Softcorp.Ssn
	(*User)(nil),                       // 21: Softcorp.User
	(*ClientMetadata)(nil),             // 22: Softcorp.ClientMetadata
	(*ClientApp)(nil),                  // 23: Softcorp.ClientApp
	(*PublicUserRequest)(nil),          // 24: Softcorp.PublicUserRequest
	(*PublicUserResponse)(nil),         // 25: Softcorp.PublicUserResponse
	(*AdminUserRequest)(nil),           // 26: Softcorp.AdminUserRequest
	(*AdminUserResponse)(nil),          // 27: Softcorp.AdminUserResponse
	(*AuthPublicRequest)(nil),          // 28: Softcorp.AuthPublicRequest
	(*AuthPublicResponse)(nil),         // 29: Softcorp.AuthPublicResponse
	(*ConnectAdminRequest)(nil),        // 30: Softcorp.ConnectAdminRequest
	(*ConnectAdminResponse)(nil),       // 31: Softcorp.ConnectAdminResponse
	(*PublicDashboardRequest)(nil),     // 32: Softcorp.PublicDashboardRequest
	(*PublicDashboardResponse)(nil),    // 33: Softcorp.PublicDashboardResponse
	(*AdminCollaborationRequest)(nil),  // 34: Softcorp.AdminCollaborationRequest
	(*AdminCollaborationResponse)(nil), // 35: Softcorp.AdminCollaborationResponse
	(*Request)(nil),                    // 36: Softcorp.Request
	(*Response)(nil),                   // 37: Softcorp.Response
	nil,                                // 38: Softcorp.ConnectAdminResponse.MetricsEntry
	nil,                                // 39: Softcorp.PublicDashboardResponse.MetricsEntry
	(*timestamppb.Timestamp)(nil),      // 40: google.protobuf.Timestamp
}
var file_softcorp_proto_depIdxs = []int32{
	40,  // 0: Softcorp.ConnectMetric.date:type_name -> google.protobuf.Timestamp
	10,  // 1: Softcorp.ConnectMetrics.metrics:type_name -> Softcorp.ConnectMetric
	4,   // 2: Softcorp.Collaboration.collaborationType:type_name -> Softcorp.CollaborationType
	40,  // 3: Softcorp.Collaboration.createdAt:type_name -> google.protobuf.Timestamp
	40,  // 4: Softcorp.Collaboration.updatedAt:type_name -> google.protobuf.Timestamp
	40,  // 5: Softcorp.Organization.createdAt:type_name -> google.protobuf.Timestamp
	40,  // 6: Softcorp.Organization.updatedAt:type_name -> google.protobuf.Timestamp
	12,  // 7: Softcorp.Organization.collaborations:type_name -> Softcorp.Collaboration
	2,   // 8: Softcorp.Scope.scopeType:type_name -> Softcorp.ScopeType
	5,   // 9: Softcorp.Grant.grantType:type_name -> Softcorp.GrantType
	6,   // 10: Softcorp.OauthResponse.responseType:type_name -> Softcorp.ResponeType
	7,   // 11: Softcorp.LanguageCode.languageCodeType:type_name -> Softcorp.LanguageCodeType
	8,   // 12: Softcorp.CountryCode.countryCodeType:type_name -> Softcorp.CountryCodeType
	9,   // 13: Softcorp.SsnProvider.ssnProviderType:type_name -> Softcorp.SsnProviderType
	19,  // 14: Softcorp.Ssn.ssnProvider:type_name -> Softcorp.SsnProvider
	1,   // 15: Softcorp.User.gender:type_name -> Softcorp.Gender
	40,  // 16: Softcorp.User.birthday:type_name -> google.protobuf.Timestamp
	18,  // 17: Softcorp.User.country:type_name -> Softcorp.CountryCode
	17,  // 18: Softcorp.User.preferredLanguage:type_name -> Softcorp.LanguageCode
	40,  // 19: Softcorp.User.createdAt:type_name -> google.protobuf.Timestamp
	40,  // 20: Softcorp.User.updatedAt:type_name -> google.protobuf.Timestamp
	18,  // 21: Softcorp.ClientMetadata.allowedCountries:type_name -> Softcorp.CountryCode
	22,  // 22: Softcorp.ClientApp.clientMetadata:type_name -> Softcorp.ClientMetadata
	14,  // 23: Softcorp.ClientApp.scopes:type_name -> Softcorp.Scope
	15,  // 24: Softcorp.ClientApp.grants:type_name -> Softcorp.Grant
	16,  // 25: Softcorp.ClientApp.responses:type_name -> Softcorp.OauthResponse
	40,  // 26: Softcorp.ClientApp.createdAt:type_name -> google.protobuf.Timestamp
	40,  // 27: Softcorp.ClientApp.updatedAt:type_name -> google.protobuf.Timestamp
	14,  // 28: Softcorp.ClientApp.availableScopes:type_name -> Softcorp.Scope
	15,  // 29: Softcorp.ClientApp.availableGrants:type_name -> Softcorp.Grant
	16,  // 30: Softcorp.ClientApp.availableResponses:type_name -> Softcorp.OauthResponse
	18,  // 31: Softcorp.ClientApp.availableCountries:type_name -> Softcorp.CountryCode
	14,  // 32: Softcorp.ClientApp.advancedScopes:type_name -> Softcorp.Scope
	12,  // 33: Softcorp.ClientApp.collaborations:type_name -> Softcorp.Collaboration
	21,  // 34: Softcorp.PublicUserResponse.user:type_name -> Softcorp.User
	21,  // 35: Softcorp.AdminUserRequest.user:type_name -> Softcorp.User
	21,  // 36: Softcorp.AdminUserResponse.user:type_name -> Softcorp.User
	21,  // 37: Softcorp.AdminUserResponse.users:type_name -> Softcorp.User
	1,   // 38: Softcorp.AuthPublicRequest.gender:type_name -> Softcorp.Gender
	19,  // 39: Softcorp.AuthPublicRequest.ssnProvider:type_name -> Softcorp.SsnProvider
	23,  // 40: Softcorp.AuthPublicResponse.client:type_name -> Softcorp.ClientApp
	23,  // 41: Softcorp.ConnectAdminRequest.app:type_name -> Softcorp.ClientApp
	0,   // 42: Softcorp.ConnectAdminRequest.timespan:type_name -> Softcorp.Timespan
	23,  // 43: Softcorp.ConnectAdminResponse.app:type_name -> Softcorp.ClientApp
	38,  // 44: Softcorp.ConnectAdminResponse.metrics:type_name -> Softcorp.ConnectAdminResponse.MetricsEntry
	13,  // 45: Softcorp.PublicDashboardRequest.organization:type_name -> Softcorp.Organization
	23,  // 46: Softcorp.PublicDashboardRequest.connectApp:type_name -> Softcorp.ClientApp
	0,   // 47: Softcorp.PublicDashboardRequest.timespan:type_name -> Softcorp.Timespan
	12,  // 48: Softcorp.PublicDashboardRequest.collaboration:type_name -> Softcorp.Collaboration
	13,  // 49: Softcorp.PublicDashboardResponse.organization:type_name -> Softcorp.Organization
	13,  // 50: Softcorp.PublicDashboardResponse.organizations:type_name -> Softcorp.Organization
	12,  // 51: Softcorp.PublicDashboardResponse.collaboration:type_name -> Softcorp.Collaboration
	12,  // 52: Softcorp.PublicDashboardResponse.collaborations:type_name -> Softcorp.Collaboration
	23,  // 53: Softcorp.PublicDashboardResponse.connectApp:type_name -> Softcorp.ClientApp
	23,  // 54: Softcorp.PublicDashboardResponse.connectApps:type_name -> Softcorp.ClientApp
	39,  // 55: Softcorp.PublicDashboardResponse.metrics:type_name -> Softcorp.PublicDashboardResponse.MetricsEntry
	13,  // 56: Softcorp.AdminCollaborationRequest.organization:type_name -> Softcorp.Organization
	23,  // 57: Softcorp.AdminCollaborationRequest.connectApp:type_name -> Softcorp.ClientApp
	12,  // 58: Softcorp.AdminCollaborationRequest.collaboration:type_name -> Softcorp.Collaboration
	12,  // 59: Softcorp.AdminCollaborationResponse.collaboration:type_name -> Softcorp.Collaboration
	12,  // 60: Softcorp.AdminCollaborationResponse.collaborations:type_name -> Softcorp.Collaboration
	11,  // 61: Softcorp.ConnectAdminResponse.MetricsEntry.value:type_name -> Softcorp.ConnectMetrics
	11,  // 62: Softcorp.PublicDashboardResponse.MetricsEntry.value:type_name -> Softcorp.ConnectMetrics
	36,  // 63: Softcorp.ConnectPublicService.Ping:input_type -> Softcorp.Request
	28,  // 64: Softcorp.ConnectPublicService.ValidateLoginChallenge:input_type -> Softcorp.AuthPublicRequest
	28,  // 65: Softcorp.ConnectPublicService.ValidateUserCredentials:input_type -> Softcorp.AuthPublicRequest
	28,  // 66: Softcorp.ConnectPublicService.ValidateConsentChallenge:input_type -> Softcorp.AuthPublicRequest
	28,  // 67: Softcorp.ConnectPublicService.GiveConsent:input_type -> Softcorp.AuthPublicRequest
	28,  // 68: Softcorp.ConnectPublicService.Logout:input_type -> Softcorp.AuthPublicRequest
	28,  // 69: Softcorp.ConnectPublicService.CreateUser:input_type -> Softcorp.AuthPublicRequest
	28,  // 70: Softcorp.ConnectPublicService.SendResetEmail:input_type -> Softcorp.AuthPublicRequest
	28,  // 71: Softcorp.ConnectPublicService.ResetPassword:input_type -> Softcorp.AuthPublicRequest
	36,  // 72: Softcorp.ConnectAdminService.Ping:input_type -> Softcorp.Request
	30,  // 73: Softcorp.ConnectAdminService.CreateApp:input_type -> Softcorp.ConnectAdminRequest
	30,  // 74: Softcorp.ConnectAdminService.GetAppById:input_type -> Softcorp.ConnectAdminRequest
	30,  // 75: Softcorp.ConnectAdminService.UpdateAppDetails:input_type -> Softcorp.ConnectAdminRequest
	30,  // 76: Softcorp.ConnectAdminService.UpdateAppOAuth:input_type -> Softcorp.ConnectAdminRequest
	30,  // 77: Softcorp.ConnectAdminService.ResetAppOAuth:input_type -> Softcorp.ConnectAdminRequest
	30,  // 78: Softcorp.ConnectAdminService.UpdateAppSecurity:input_type -> Softcorp.ConnectAdminRequest
	30,  // 79: Softcorp.ConnectAdminService.GetAppMetrics:input_type -> Softcorp.ConnectAdminRequest
	30,  // 80: Softcorp.ConnectAdminService.DeleteApp:input_type -> Softcorp.ConnectAdminRequest
	36,  // 81: Softcorp.UserPublicService.Ping:input_type -> Softcorp.Request
	24,  // 82: Softcorp.UserPublicService.GetUserByToken:input_type -> Softcorp.PublicUserRequest
	24,  // 83: Softcorp.UserPublicService.UpdateUserPassword:input_type -> Softcorp.PublicUserRequest
	24,  // 84: Softcorp.UserPublicService.UpdateUserEmail:input_type -> Softcorp.PublicUserRequest
	24,  // 85: Softcorp.UserPublicService.UpdateUserGender:input_type -> Softcorp.PublicUserRequest
	24,  // 86: Softcorp.UserPublicService.DeleteUser:input_type -> Softcorp.PublicUserRequest
	36,  // 87: Softcorp.UserAdminService.Ping:input_type -> Softcorp.Request
	26,  // 88: Softcorp.UserAdminService.CreateUser:input_type -> Softcorp.AdminUserRequest
	26,  // 89: Softcorp.UserAdminService.GetUserById:input_type -> Softcorp.AdminUserRequest
	26,  // 90: Softcorp.UserAdminService.GetUserByEmail:input_type -> Softcorp.AdminUserRequest
	26,  // 91: Softcorp.UserAdminService.GetBulkUsersById:input_type -> Softcorp.AdminUserRequest
	26,  // 92: Softcorp.UserAdminService.GetBulkUsersByEmail:input_type -> Softcorp.AdminUserRequest
	36,  // 93: Softcorp.CollaborationPublicService.Ping:input_type -> Softcorp.Request
	36,  // 94: Softcorp.CollaborationAdminService.Ping:input_type -> Softcorp.Request
	34,  // 95: Softcorp.CollaborationAdminService.CreateCollaboration:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 96: Softcorp.CollaborationAdminService.GetCollaborationById:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 97: Softcorp.CollaborationAdminService.GetCollaborationsByObjectId:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 98: Softcorp.CollaborationAdminService.GetUserCollaborations:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 99: Softcorp.CollaborationAdminService.GetUserObjectCollaboration:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 100: Softcorp.CollaborationAdminService.AcceptCollaboration:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 101: Softcorp.CollaborationAdminService.DeleteUserObjectCollaboration:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 102: Softcorp.CollaborationAdminService.DeleteCollaborationsByObjectId:input_type -> Softcorp.AdminCollaborationRequest
	34,  // 103: Softcorp.CollaborationAdminService.DeleteUserCollaborations:input_type -> Softcorp.AdminCollaborationRequest
	36,  // 104: Softcorp.DashboardPublicService.Ping:input_type -> Softcorp.Request
	32,  // 105: Softcorp.DashboardPublicService.CreateOrganization:input_type -> Softcorp.PublicDashboardRequest
	32,  // 106: Softcorp.DashboardPublicService.GetOrganizations:input_type -> Softcorp.PublicDashboardRequest
	32,  // 107: Softcorp.DashboardPublicService.UpdateOrganizationDetails:input_type -> Softcorp.PublicDashboardRequest
	32,  // 108: Softcorp.DashboardPublicService.DeleteOrganization:input_type -> Softcorp.PublicDashboardRequest
	32,  // 109: Softcorp.DashboardPublicService.CreateConnectApp:input_type -> Softcorp.PublicDashboardRequest
	32,  // 110: Softcorp.DashboardPublicService.GetConnectAppsByOrgId:input_type -> Softcorp.PublicDashboardRequest
	32,  // 111: Softcorp.DashboardPublicService.GetConnectAppById:input_type -> Softcorp.PublicDashboardRequest
	32,  // 112: Softcorp.DashboardPublicService.UpdateConnectAppDetails:input_type -> Softcorp.PublicDashboardRequest
	32,  // 113: Softcorp.DashboardPublicService.UpdateConnectAppOAuth:input_type -> Softcorp.PublicDashboardRequest
	32,  // 114: Softcorp.DashboardPublicService.ResetConnectAppOAuth:input_type -> Softcorp.PublicDashboardRequest
	32,  // 115: Softcorp.DashboardPublicService.UpdateConnectAppSecurity:input_type -> Softcorp.PublicDashboardRequest
	32,  // 116: Softcorp.DashboardPublicService.GetAppMetrics:input_type -> Softcorp.PublicDashboardRequest
	32,  // 117: Softcorp.DashboardPublicService.DeleteConnectApp:input_type -> Softcorp.PublicDashboardRequest
	32,  // 118: Softcorp.DashboardPublicService.InviteCollaborator:input_type -> Softcorp.PublicDashboardRequest
	32,  // 119: Softcorp.DashboardPublicService.GetCollaborations:input_type -> Softcorp.PublicDashboardRequest
	32,  // 120: Softcorp.DashboardPublicService.AcceptCollaboration:input_type -> Softcorp.PublicDashboardRequest
	32,  // 121: Softcorp.DashboardPublicService.DeleteCollaboration:input_type -> Softcorp.PublicDashboardRequest
	37,  // 122: Softcorp.ConnectPublicService.Ping:output_type -> Softcorp.Response
	29,  // 123: Softcorp.ConnectPublicService.ValidateLoginChallenge:output_type -> Softcorp.AuthPublicResponse
	29,  // 124: Softcorp.ConnectPublicService.ValidateUserCredentials:output_type -> Softcorp.AuthPublicResponse
	29,  // 125: Softcorp.ConnectPublicService.ValidateConsentChallenge:output_type -> Softcorp.AuthPublicResponse
	29,  // 126: Softcorp.ConnectPublicService.GiveConsent:output_type -> Softcorp.AuthPublicResponse
	29,  // 127: Softcorp.ConnectPublicService.Logout:output_type -> Softcorp.AuthPublicResponse
	29,  // 128: Softcorp.ConnectPublicService.CreateUser:output_type -> Softcorp.AuthPublicResponse
	29,  // 129: Softcorp.ConnectPublicService.SendResetEmail:output_type -> Softcorp.AuthPublicResponse
	29,  // 130: Softcorp.ConnectPublicService.ResetPassword:output_type -> Softcorp.AuthPublicResponse
	37,  // 131: Softcorp.ConnectAdminService.Ping:output_type -> Softcorp.Response
	31,  // 132: Softcorp.ConnectAdminService.CreateApp:output_type -> Softcorp.ConnectAdminResponse
	31,  // 133: Softcorp.ConnectAdminService.GetAppById:output_type -> Softcorp.ConnectAdminResponse
	31,  // 134: Softcorp.ConnectAdminService.UpdateAppDetails:output_type -> Softcorp.ConnectAdminResponse
	31,  // 135: Softcorp.ConnectAdminService.UpdateAppOAuth:output_type -> Softcorp.ConnectAdminResponse
	31,  // 136: Softcorp.ConnectAdminService.ResetAppOAuth:output_type -> Softcorp.ConnectAdminResponse
	31,  // 137: Softcorp.ConnectAdminService.UpdateAppSecurity:output_type -> Softcorp.ConnectAdminResponse
	31,  // 138: Softcorp.ConnectAdminService.GetAppMetrics:output_type -> Softcorp.ConnectAdminResponse
	31,  // 139: Softcorp.ConnectAdminService.DeleteApp:output_type -> Softcorp.ConnectAdminResponse
	37,  // 140: Softcorp.UserPublicService.Ping:output_type -> Softcorp.Response
	25,  // 141: Softcorp.UserPublicService.GetUserByToken:output_type -> Softcorp.PublicUserResponse
	25,  // 142: Softcorp.UserPublicService.UpdateUserPassword:output_type -> Softcorp.PublicUserResponse
	25,  // 143: Softcorp.UserPublicService.UpdateUserEmail:output_type -> Softcorp.PublicUserResponse
	25,  // 144: Softcorp.UserPublicService.UpdateUserGender:output_type -> Softcorp.PublicUserResponse
	25,  // 145: Softcorp.UserPublicService.DeleteUser:output_type -> Softcorp.PublicUserResponse
	37,  // 146: Softcorp.UserAdminService.Ping:output_type -> Softcorp.Response
	27,  // 147: Softcorp.UserAdminService.CreateUser:output_type -> Softcorp.AdminUserResponse
	27,  // 148: Softcorp.UserAdminService.GetUserById:output_type -> Softcorp.AdminUserResponse
	27,  // 149: Softcorp.UserAdminService.GetUserByEmail:output_type -> Softcorp.AdminUserResponse
	27,  // 150: Softcorp.UserAdminService.GetBulkUsersById:output_type -> Softcorp.AdminUserResponse
	27,  // 151: Softcorp.UserAdminService.GetBulkUsersByEmail:output_type -> Softcorp.AdminUserResponse
	37,  // 152: Softcorp.CollaborationPublicService.Ping:output_type -> Softcorp.Response
	37,  // 153: Softcorp.CollaborationAdminService.Ping:output_type -> Softcorp.Response
	35,  // 154: Softcorp.CollaborationAdminService.CreateCollaboration:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 155: Softcorp.CollaborationAdminService.GetCollaborationById:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 156: Softcorp.CollaborationAdminService.GetCollaborationsByObjectId:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 157: Softcorp.CollaborationAdminService.GetUserCollaborations:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 158: Softcorp.CollaborationAdminService.GetUserObjectCollaboration:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 159: Softcorp.CollaborationAdminService.AcceptCollaboration:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 160: Softcorp.CollaborationAdminService.DeleteUserObjectCollaboration:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 161: Softcorp.CollaborationAdminService.DeleteCollaborationsByObjectId:output_type -> Softcorp.AdminCollaborationResponse
	35,  // 162: Softcorp.CollaborationAdminService.DeleteUserCollaborations:output_type -> Softcorp.AdminCollaborationResponse
	37,  // 163: Softcorp.DashboardPublicService.Ping:output_type -> Softcorp.Response
	33,  // 164: Softcorp.DashboardPublicService.CreateOrganization:output_type -> Softcorp.PublicDashboardResponse
	33,  // 165: Softcorp.DashboardPublicService.GetOrganizations:output_type -> Softcorp.PublicDashboardResponse
	33,  // 166: Softcorp.DashboardPublicService.UpdateOrganizationDetails:output_type -> Softcorp.PublicDashboardResponse
	33,  // 167: Softcorp.DashboardPublicService.DeleteOrganization:output_type -> Softcorp.PublicDashboardResponse
	33,  // 168: Softcorp.DashboardPublicService.CreateConnectApp:output_type -> Softcorp.PublicDashboardResponse
	33,  // 169: Softcorp.DashboardPublicService.GetConnectAppsByOrgId:output_type -> Softcorp.PublicDashboardResponse
	33,  // 170: Softcorp.DashboardPublicService.GetConnectAppById:output_type -> Softcorp.PublicDashboardResponse
	33,  // 171: Softcorp.DashboardPublicService.UpdateConnectAppDetails:output_type -> Softcorp.PublicDashboardResponse
	33,  // 172: Softcorp.DashboardPublicService.UpdateConnectAppOAuth:output_type -> Softcorp.PublicDashboardResponse
	33,  // 173: Softcorp.DashboardPublicService.ResetConnectAppOAuth:output_type -> Softcorp.PublicDashboardResponse
	33,  // 174: Softcorp.DashboardPublicService.UpdateConnectAppSecurity:output_type -> Softcorp.PublicDashboardResponse
	33,  // 175: Softcorp.DashboardPublicService.GetAppMetrics:output_type -> Softcorp.PublicDashboardResponse
	33,  // 176: Softcorp.DashboardPublicService.DeleteConnectApp:output_type -> Softcorp.PublicDashboardResponse
	33,  // 177: Softcorp.DashboardPublicService.InviteCollaborator:output_type -> Softcorp.PublicDashboardResponse
	33,  // 178: Softcorp.DashboardPublicService.GetCollaborations:output_type -> Softcorp.PublicDashboardResponse
	33,  // 179: Softcorp.DashboardPublicService.AcceptCollaboration:output_type -> Softcorp.PublicDashboardResponse
	33,  // 180: Softcorp.DashboardPublicService.DeleteCollaboration:output_type -> Softcorp.PublicDashboardResponse
	122, // [122:181] is the sub-list for method output_type
	63,  // [63:122] is the sub-list for method input_type
	63,  // [63:63] is the sub-list for extension type_name
	63,  // [63:63] is the sub-list for extension extendee
	0,   // [0:63] is the sub-list for field type_name
}

func init() { file_softcorp_proto_init() }
func file_softcorp_proto_init() {
	if File_softcorp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_softcorp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collaboration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsnProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ssn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCollaborationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCollaborationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_softcorp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_softcorp_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_softcorp_proto_goTypes,
		DependencyIndexes: file_softcorp_proto_depIdxs,
		EnumInfos:         file_softcorp_proto_enumTypes,
		MessageInfos:      file_softcorp_proto_msgTypes,
	}.Build()
	File_softcorp_proto = out.File
	file_softcorp_proto_rawDesc = nil
	file_softcorp_proto_goTypes = nil
	file_softcorp_proto_depIdxs = nil
}
